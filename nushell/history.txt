l
ls
eza
l
ls -l
nim 
cd ~/.config/nushell
l
ls
nvim config.nu
ls
ls --mime-type 
cd ~/.config/nushell
ls
c
cd
ls
cd -
help ls
ls --help 
help cp
cp config.nu config.nu2
rm config.nu2
n config.nu
nvim config.nu
ff
nvim config.nu
znu
nvim config.nu
config nu
config --help 
eonfig env
config env
config --help
config nu
echo $EDITOR
config nu
echo $EDITOR
echo 12
$env.EDITOR
sudoedit /etc/fstab
kubectl help
ls
kubectl completion
kubectl completion -h
kubectl completion nushell
kubectl completion nu
cd
chsh -s nushell
chsh -h
chsh -l
chsh -s /usr/bin/nu
chsh -h
chsh -l 
chsh -s /usr/bin/nu
reboot
cd nushell
cd ~/.config/nushell
zoxide init --help
ls
ls --long 
ls --threads 
ls --threads config.nu
ls --all 
nvim config.nu
ls
cd
ls
y
yazi
cd nushell
cd ~/.config/nushell
nvim config.nu
cd yazi
z yazi
zoxide --help
n config.nu
nvim config.nu
zshz
chsh -s /usr/bin/nu
l
lu
ls
chsh -s /usr/bin/zsh
cd
cd nushell
cd ~/.config/nushell
nvim config.nu
nvim  
nvim  config.nu
z 
zi
nvim  config.nu
z
zi
nivm
cd yazi
cdi
cdh
cdi
cargo --help
cargo --list
cargo remove zoxide
z
zi
ls
cd ~/.config/nvim
yazi
zoxie
zoxide
zoxide init nushell
zoxide init nushell | save -f ~/.config/nushell/zoxide.nu
cd
cd yazi
ls -ls
ls -la
ls -ls
ls -lll
ls -lsllslsli
ls -lsllslsl
ls --help
help ls
ls * nu
ls *.nu
mkdir --help
help mkdir
help find
find config
find config.nu
find . config.nu
help find
find config.nu
cd tammy
cd ~/Development/Coding/CLI/tammy/
l
ls
find main.go
"main.go" | find
find 
fd
fd main
fd main.go
fd | rg main
fd | rg main.go
find
CARGO_LOG=trace fd
find --help
find --regex "main"
ls --tree
ls
ls --full-paths 
ls --du 
where
help where
where main.go
"main.go" | where
ls
ls **/*
go run (ls **/* | rg main.go)
go run (ls **/* | rg main.go | awk '{print $3}')
ls **/* | rg main.go | awk '{print $3}'
ls **/* | rg main.go | awk '{print $4}'
go run (ls **/* | rg main.go | awk '{print $4}')
ff
l
ls
y
yazi
ls **/
ls **/*
ls
y
cd nu
n config.nu
rm ~/.local/state/nvim/swap/
rm -rf ~/.local/state/nvim/swap/
n config.nu
y
cd
y
cd zsh
rm -rf ~/.config/nushell ; ln -s nushell/ ~/.config/nushell
ls -l ~/.config | where type == symlink
rm -rf ~/.config/nushell ; ln -s ~/.cli-settings/nushell/ ~/.config/nushell
ls -l ~/.config | where type == symlink
ls
ls zsh
lg
ls -l ~/.config | where type == symlink
y
n config.nu
l
config nu
ls
ls **/*
y
cd yazi
y
rns yazi
rofi
pkill rofi
cd
btrfs property get 
dw yazi
s btrfs property get /
y
reboot
l
ls
rofi 
y
cd notes
n Work/MAC and IP adress.md
n Work/MAC\ and\ IP\ adress.md
n Work/"MAC and IP adress.md"
y
cd yazi
l
..
mv yazi yazii
y
mv yazii yazi
y
cd yazi
ya --help
ya pack -u
y
ya pack --help
ya --help
ya pack -m
nim --help
y
rm plugins/git.yazi/
lg
rm -rf plugins/git.yazi/
y
rg git
n package.toml
y
n init.lua
y
rm theme.toml
y
lg
y
rmrf plugins/starship.yazi/
y
rmrf plugins/eza-preview.yazi/
y
n init.lua
y
n init.lua
y
ansible-playbook -i make-symlinks.yml
ansible playbook make-symlinks.yml
ansible playbook -i make-symlinks.yml
dw ansible-playbook
ansible-playbook -i make-symlinks.yml
./make-symlinks.yml
x make-symlinks.yml
./make-symlinks.yml
rm ~/.zsh_history
y
./make-symlinks.yml
cd cli
./make-symlinks.yml
./make-symlinks.yml -vvv
ls --all ~/ | where type == symlink
ls --all ~/ 
ls --all ~/  | rg tmux
ls --all ~/  | rg zsh
./make-symlinks.yml -vvv
ls --all ~/  | rg zsh
./make-symlinks.yml 
cd ../ && mv cli-settings cli
cd ../ and mv cli-settings cli
cd .. and mv cli-settings cli
.. and mv cli-settings cli
cd ..
./make-symlinks.yml
y
..
ff
y
./make-symlinks.yml
ff
y
git clone  https://github.com/HyDE-Project/HyDE
n
y
ls
y
ls
cd hypr
y
ls
cd cli
n make-symlinks.yml
lg
cd
ls
ls -l
ls -la
ls -al
nh
hypr
cd hypr
fzf
y
hyprctl switchxkblayout by-tech-gaming-keyboard next 
cd
cdi
cdh
cd nu
zi
config nu
zh
cdi
ls | get name
ls | get type
ls | get name | get type
ls | get name ; get type
ls | get name ; ls | get  type
ls | get name ; ls | get type
ls | get name and ls | get type
up
n
nvim
config nu
dirs
dirs add
config nu
dirs
dirs add ~/.config/nushell
dirs
dirs pre
dirs prev
dirs add ~/.config/nvim
dirs prev
dirs list
dirs
dirs nvim
dirs --help
help dirs
dirs next
config nu
in
y
dw carapace
iftop
config env 
config nu 
cd notes
cd -
config nu
cava
diaah
cd
hf
hf --help
fish --help
hf 'fish -c exit'
nu --help
hf 'nu -c exit'
hf 'zsh -c exit'
config nu
ls
hf 'nu'
hf 'nu -c exit' && hf 'fish -c exit'
hf 'nu -c exit' ; hf 'fish -c exit'
hf 'nu -c exit' 'fish -c exit'
hf 'nu -c exit' 'fish -c exit' 'zsh -c exit'
hf -N 'nu -c exit' 'fish -c exit' 'zsh -c exit'
hf 'nu -c exit' 'fish -c exit' 'zsh -c exit'
u
nun
nu-check 
nu-check asdf
nu-check Development/
du
rm .VirtualBox/
rm -rf .VirtualBox/
ff
f
ff
fff
f
ff
f
ff
f
ff
f
ff
f
ff
f
ff
f
config nu
bench zsh -c exit
bench 'zsh -c exit'
config nu
pacman -Qq
pacman -Q
pacman -Q | dc
help table
pacman -Q | split column -s " "
pacman -Q | split column " "
pacman -Q | split row " "
pacman -Q 
pacman -Q | split words " "
pacman -Q | split words
pacman -q
pacman -Q
pacman -Q | split column --help
pacman -Q | split row " "
pacman -Q
pacman -Q | less
u
pacman -Q | split row " "
pacman -Q | split row --regex '[A-z] [0-9]'
pacman -Q | split column --regex '[A-z] [0-9]'
split column --help
nu
ls
l
ls
ls -d
ls -d ~/
cd
y
up
config nu
hypr
nh
n ~/.config/hypr/hyprland/rules.conf 
y
n main.go
y
kitty +icat nim.gif
icat nim.gif
config nu
chsh -s /usr/bin/nu
icat nim.gif
cd yazi
n yazi.toml 
y
up
config nu
n
up
xdotool
historyy
history
^history
run-external history
config nu
y
cd config
cd
config nu
n ~/.config/hypr/themes/theme.conf 
n ~/.config/hypr/hyprland/rules.conf 
y
cd hypr
y
docker ps --format {{.Names}}
docker ps --format '{{.Names}}'
$ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres<\n>
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
docker ps --format {{.Names}}
def --help
docker ps | lines | each { |it| echo $it }
docker pruneall 
docker ps
docker pruneall
docker ps -q
docker pruneall
docker ps
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
lazydocker
docker container ls
docker container ls -a -q
docker pruneall
config nu
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
lazydocker
n
docker container ls -a -q
docker container ls -a -q | docker rm --
docker rm (docker container ls -a -q)
n
docker pruneall
lazydocker
config nu
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
docker exec -it some-postgres bash
docker exec -it some-postgres psql -U postgres
docker pruneall
y
cd
c
cd
run-external "ls"
nz
^ls
^ls | complete
scope aliases
cd
ls and echo \n\n\n\n\n\n\n\n\n\n\n\n
ls ; echo \n\n\n\n\n\n\n\n\n\n\n\n
ls ; ^printf \n\n\n\n\n\n\n\n\n\n\n\n
ls
nu --help
plugin list
config nu
chsh -s /usr/bin/zsh
ls -d
config
config use-colors
ls
all_history_nenu
all_history_menu
history
cd (ls | where type == dir | each { |row| $row.name} | str join (char nl) | fzf | decode utf-8 | str trim)
config nu
cd (ls | where type == dir | each { |row| $row.name} | str join (char nl) | fzf | decode utf-8 | str trim)
cd
cd (ls | where type == dir | each { |row| $row.name} | str join (char nl) | fzf | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --prewiev ''<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview ''<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'nu -c ls'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'nu -c ls {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'eza --tree {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'dust {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview '(ls {})'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls | where type == dir'<\n>          | decode utf-8 | str trim)
chsh -s /usr/bin/nu
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls | where type == dir'<\n>          | decode utf-8 | str trim)
n
hypr
n ~/.config/hypr/hyprland/other.conf 
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls | where type == dir'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls -d {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {}/*'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {} **/*'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {}'<\n>          | decode utf-8 | str trim)
ls
ls -d
cd
cd Development/
cd
cd Documents/
cd
cd -
cd
cd -
pwd
cd
cd -
ls | sort-by type name -i | grid -c
print (ls)
echo ls
echo (ls)
^echo (ls)
cd
cd Documents/
cd
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls {}'<\n>          | decode utf-8 | str trim)
ls --all
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls -a {}'<\n>          | decode utf-8 | str trim)
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls --all {}'<\n>          | decode utf-8 | str trim)
ls -all
ls --short-names 
cd (ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls --short-names {}'<\n>          | decode utf-8 | str trim)
ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)<\n>          | fzf --preview 'ls --short-names {}'<\n>          | decode utf-8 | str trim
<\n>          | decode utf-8 | str trim
ls<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl)
ls ~/Documents/<\n>          | where type == dir<\n>          | each { |row| $row.name}<\n>          | str join (char nl) 
history | reverse | each { echo [$it (char nl)] } | str collect | fzf --header '[HISTORY]' | cbs
history<\n>          | each { |row| $row.name}<\n>          | fzf --preview 'ls --short-names {}'<\n>          | decode utf-8 | str trim)
history<\n>          | each { |row| $row.name}<\n>          | fzf<\n>          | decode utf-8 | str trim)
history<\n>          | each { |row| $row.name}<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | each { |row| command}<\n>          | fzf<\n>          | decode utf-8 | str trim
history
history<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | each {|row| $row.name}<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | each {|row| 'command'}<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | each {|row| $row.name}<\n>          | fzf<\n>          | decode utf-8 | str trim
history
history<\n>          | each {|row| $row.command}<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | get command<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | get command | flatten<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | get command | flatten<\n>
history<\n>          | each {|row| $row.command}<\n>
history | each {|row| $row.command}
history<\n>          | select command | flatten<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>           | get command<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>           | select command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>           | select command<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>           | select command | get command<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>           | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim
carapace _carapace nushell | save --force "~/.cache/carapace/init.nu"<\n>
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | do
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | sys
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | each {|cmd| sys $cmd }
ls
ls -all | wheree name == .git
ls -all | where name == .git
rm .git
rm -rf .git
c
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | each {|cmd| sys $cmd }
history<\n>            | get command<\n>            | fzf<\n>            | decode utf-8 | str trim<\n>            | each {|cmd| sys cmd $cmd }
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | sys
nunu
c
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | do
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           | <\n>
history<\n>           | get command<\n>           | fzf<\n>           | decode utf-8 | str trim<\n>           
history<\n>           | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim
history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim<\n>          | do {clone $it}
history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim<\n>          | do 
do (history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim)
do {(history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim)}
sys {(history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim)}
history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim }
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim | into int }
nz
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim }
l
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim }
ls
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim }
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 }
do {<\n>          history<\n>          | get command | to text<\n>          | fzf<\n>          | decode utf-8 | str trim }
do {<\n>          history<\n>          | get command | to text<\n>          | fzf}
do {<\n>          history<\n>          | get command | to text<\n>          | fzf }
c
do {<\n>          history<\n>          | get command | to text<\n>          | fzf }
sys {<\n>          history<\n>          | get command | to text<\n>          | fzf }
print ( history<\n>          | get command | to text<\n>          | fzf )
let cmd = history | get command | to text | fzf ; do $cmd
let cmd = history | get command | to text | fzf {}; do $cmd
let cmd = history | get command | to text | fzf {||}; do $cmd
cd notes
ls | get name | to text
cd
ls **/* | where type == dir | get name | to text
zoxide add (ls **/* | where type == dir | get name | to text)
c
n
cd notes
cd
ff | dc
dc
docker ps
docker ps | dc
docker ps --all 
cd todo
y
n interface.md
env 
env  | rg fzf
env | where name =~ "FZF"
env | fzf
env | rg fzf
env | rg -i fzf
table --list
